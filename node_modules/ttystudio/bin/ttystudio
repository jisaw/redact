#!/usr/bin/env node

/**
 * ttystudio - recorder and compiler for ttystudio
 * Copyright (c) 2015, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/ttystudio
 */

var fs = require('fs')
  , options = require('../lib/options');

/**
 * Title
 */

process.title = 'ttystudio';

/**
 * Compile
 */

function compile(options) {
  var compiler = require('../lib/compile');
  return compiler(options, function(err) {
    if (err) return fail(err);
  });
}

/**
 * Record
 */

function record(options) {
  var recorder = require('../lib/record')
    , compiler = require('../lib/compile');

  return recorder(options, function(err, frames) {
    if (err) return fail(err);

    var output = options.files[0] || options.o || options.output
      , json = JSON.stringify(frames);

    if (!output) {
      return fail('Error: No output file specified.');
    }

    if (~output.indexOf('.json')) {
      log('wrote frames to %s', output);
      fs.writeFileSync(output, json);
      return process.exit(0);
    }

    fs.writeFileSync(output.replace(/\.\w+$/, '') + '.frames.json', json);

    if (options.screenshot) {
      var pending = frames.length;
      return frames.forEach(function(frame, i) {
        options.files = [[frame], i + '-' + output];
        return compiler(options, function(err) {
          if (err) return fail(err);
          if (!--pending) {
            return process.stdin.end();
          }
        });
      });
    }

    options.files = [frames, output];

    return compiler(options, function(err) {
      if (err) return fail(err);
    });
  });
}

/**
 * Play
 */

function play(options) {
  var player = require('../lib/play');

  return player(options, function(err) {
    if (err) return fail(err);
  });
}

/**
 * Main
 */

function main(options) {
  if (options.compile || (options.files.length === 2)) {
    return compile(options);
  }
  if (options.record) {
    return record(options);
  }
  if (options.play) {
    return play(options);
  }
  return record(options);
}

/**
 * Helpers
 */

function log() {
  if (!options.log) return;
  return console.error.apply(console, arguments);
}

function fail(err) {
  console.error(err.message || err);
  return process.exit(1);
}

/**
 * Expose
 */

if (!module.parent) {
  main(options);
} else {
  exports = main;
  exports.main = main;
  exports.compile = compile;
  exports.record = record;
  exports.play = play;
  exports.studio = require('../');
  module.exports = exports;
}
